package dk.javacode.srsm.helpers;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedHashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import dk.javacode.srsm.converters.JdbcDataConverter;
import dk.javacode.srsm.descriptors.ColumnDescriptor;
import dk.javacode.srsm.descriptors.TableDescriptor;
import dk.javacode.srsm.exceptions.MappingException;
import dk.javacode.srsm.util.ReflectionUtil;

/**
 * Utility class to insert mapped objects.
 */
public class SqlInsertHelper {
	private static Logger log = LoggerFactory.getLogger(SqlInsertHelper.class);

	/**
	 * Creates an insert SQL statement from a given pojo. Note that POJOs that
	 * uses custom converters will likely fail on insert - or worse may succeed
	 * in inserting invalid data into the database. (A future solution may be to
	 * make converters two-way)
	 * 
	 * Returns a result containing the Sql and the parameterValues as a list.
	 * This method uses setAccessible(true) on fields and therefore won't work
	 * in some security contexts.
	 * 
	 * @throws MappingException
	 */
	public <E> SqlInsert buildInsertSql(String table, E object) throws IllegalArgumentException, IllegalAccessException, MappingException {
		if (object == null) {
			throw new RuntimeException("Cannot insert null object");
		}
		SqlInsert result = new SqlInsert();
		String columns = "";
		String values = "";

		TableDescriptor tableDescriptor = TableDescriptor.build(object.getClass());
		for (ColumnDescriptor cd : tableDescriptor.getColumnDescriptors()) {
			if (cd.isCollection()) {
				continue;
			}
			Method getter = ReflectionUtil.getGetMethodForField(object.getClass(), cd.getColumnField());
			Object value = ReflectionUtil.invokeMethod(object, getter);
			String columnName = cd.getColumnName();
			if (cd.getFieldReference() != null && value != null) {
				cd.getFieldReference().setAccessible(true);
				value = cd.getFieldReference().get(value);
			}
			if (value != null) {
				value = cd.getDataConverter().pojoToDatabase(value);
				columns += columnName + ", ";
				values += "?, ";
				result.addParameterValue(columnName, value);
			}
			if (cd.isPrimaryKey()) {
				result.setPrimaryKeySetMethod(cd.getColumnSetMethod());
			}
		}
		if (columns.length() == 0) {
			throw new RuntimeException("No fields found on object.");
		}
		columns = columns.substring(0, columns.length() - 2);
		values = values.substring(0, values.length() - 2);
		String sql = "insert into " + table + " (" + columns + ") values (" + values + ")";
		result.setSql(sql);
		return result;
	}


	/**
	 * Given an open connection this method attempts to insert 'object' into
	 * 'table'.
	 * 
	 * Will set the primary key generated by the database IF:
	 *  - The primary key is annotated
	 *  - The generated key is of type java.sql.Types.INTEGER
	 *  - The primary key has a public set method
	 *  
	 *  Use the overloaded version of this method for primary keys
	 *  of other types than int.
	 * 
	 * @param connection The connection to user for the insert statement
	 * @param object The object to insert
	 * @param table The database table to insert into
	 * @throws SQLException If the database throws an exception
	 * @throws MappingException If there is an error with mappings
	 */
	public <E> Integer insert(Connection connection, E object, String table) throws SQLException, MappingException {
		PreparedStatement stmt = null;
		try {
			SqlInsert sql = buildInsertSql(table, object);
			String sqlString = sql.getSql();
			log.debug("inserting object using: " + sqlString);
			stmt = connection.prepareStatement(sqlString, Statement.RETURN_GENERATED_KEYS);
			int i = 1;
			for (Object o : sql.getParameterValues().values()) {
				stmt.setObject(i, o);
				i++;
			}
			stmt.execute();
			ResultSet keys = stmt.getGeneratedKeys();
			if (!keys.next()) {
				// Not all tables generate keys..
				log.debug("No primary key generated for object: " + object);
				return null;
			}
			if (keys.getMetaData().getColumnCount() < 1) {
				log.info("No key column in generatedKeys resultSet for object: " + object);
				return null;
			}
			int id = keys.getInt(1);
			if (sql.getPrimaryKeySetMethod() != null) {
				try {
					log.debug("Setting primary key using " + sql.getPrimaryKeySetMethod().getName() + " with argument: " + id);
					sql.getPrimaryKeySetMethod().invoke(object, id);
				} catch (InvocationTargetException e) {
					log.warn("Unable to set id on object: " + object + " to '" + id + "' using method: " + sql.getPrimaryKeySetMethod().getName());
					return id;
				} catch (RuntimeException e) {
					String errorMsg = "Unable to set id on object: " + object + " to '" + id + "' using method: " + sql.getPrimaryKeySetMethod().getName();
					log.warn(errorMsg, e);
					throw new MappingException(errorMsg, e);
				}
			}
			return id;
		} catch (IllegalAccessException e) {
			throw new MappingException("IllegalAccess - unable to insert. Check that all required methods are public", e);
		} catch (RuntimeException e) {
			log.error("Unexpected Runtime exception in SimpleResultSetMapper - please report", e);
			throw new MappingException("Unexpected Runtime exception in SimpleResultSetMapper - please report", e);
		} finally {
			if (stmt != null) {
				stmt.close();
			}
		}
	}

	/**
	 * Given an open connection this method attempts to insert 'object' into
	 * 'table'.
	 * The primaryKey column must be of the type specified.
	 * 
	 * Will set the primary key generated by the database IF:
	 *  - The primary key is annotated
	 *  - The primary key has a public set method
	 *  
	 * @param connection The connection to user for the insert statement
	 * @param object The object to insert
	 * @param table The database table to insert into
	 * @param primaryKeyType The class of the primaryKeyType ie. Long.class
	 * @throws SQLException If the database throws an exception
	 * @throws MappingException If there is an error with mappings
	 */
	public <E, P> P insert(Connection connection, E object, String table, Class<P> primaryKeyType) throws SQLException, MappingException {
		PreparedStatement stmt = null;
		try {
			SqlInsert sql = buildInsertSql(table, object);
			String sqlString = sql.getSql();
			log.debug("inserting object using: " + sqlString);
			stmt = connection.prepareStatement(sqlString, Statement.RETURN_GENERATED_KEYS);
			int i = 1;
			for (Object o : sql.getParameterValues().values()) {
				stmt.setObject(i, o);
				i++;
			}
			stmt.execute();
			ResultSet keys = stmt.getGeneratedKeys();
			if (!keys.next()) {
				// Not all tables generate keys..
				log.debug("No primary key generated for object: " + object);
				return null;
			}
			if (keys.getMetaData().getColumnCount() < 1) {
				log.info("No key column in generatedKeys resultSet for object: " + object);
				return null;
			}
			@SuppressWarnings("unchecked")
			P id = (P) keys.getObject(1);
			if (sql.getPrimaryKeySetMethod() != null) {
				try {
					log.debug("Setting primary key using " + sql.getPrimaryKeySetMethod().getName() + " with argument: " + id);
					sql.getPrimaryKeySetMethod().invoke(object, id);
				} catch (InvocationTargetException e) {
					log.warn("Unable to set id on object: " + object + " to '" + id + "' using method: " + sql.getPrimaryKeySetMethod().getName());
					return id;
				} catch (RuntimeException e) {
					String errorMsg = "Unable to set id on object: " + object + " to '" + id + "' using method: " + sql.getPrimaryKeySetMethod().getName();
					log.warn(errorMsg, e);
					throw new MappingException(errorMsg, e);
				}
			}
			return id;
		} catch (IllegalAccessException e) {
			throw new MappingException("IllegalAccess - unable to insert. Check that all required methods are public", e);
		} catch (RuntimeException e) {
			log.error("Unexpected Runtime exception in SimpleResultSetMapper - please report", e);
			throw new MappingException("Unexpected Runtime exception in SimpleResultSetMapper - please report", e);
		} finally {
			if (stmt != null) {
				stmt.close();
			}
		}
	}

	/**
	 * Given an open connection this method attempts to insert 'object' into
	 * 'table'.
	 * The primaryKey column must be of the type specified.
	 * 
	 * Will set the primary key generated by the database IF:
	 *  - The primary key is annotated
	 *  - The primary key has a public set method
	 *  
	 * @param connection The connection to user for the insert statement
	 * @param object The object to insert
	 * @param table The database table to insert into
	 * @param primaryKeyType The class of the primaryKeyType ie. Long.class
	 * @throws SQLException If the database throws an exception
	 * @throws MappingException If there is an error with mappings
	 */
	public <E, P> P insert(Connection connection, E object, String table, JdbcDataConverter<P> converter) throws SQLException, MappingException {
		PreparedStatement stmt = null;
		try {
			SqlInsert sql = buildInsertSql(table, object);
			String sqlString = sql.getSql();
			log.debug("inserting object using: " + sqlString);
			stmt = connection.prepareStatement(sqlString, Statement.RETURN_GENERATED_KEYS);
			int i = 1;
			for (Object o : sql.getParameterValues().values()) {
				stmt.setObject(i, o);
				i++;
			}
			stmt.execute();
			ResultSet keys = stmt.getGeneratedKeys();
			if (!keys.next()) {
				// Not all tables generate keys..
				log.debug("No primary key generated for object: " + object);
				return null;
			}
			if (keys.getMetaData().getColumnCount() < 1) {
				log.info("No key column in generatedKeys resultSet for object: " + object);
				return null;
			}
			Object tmpId = keys.getObject(1);
			P id = converter.convertToPojo(tmpId);

			if (sql.getPrimaryKeySetMethod() != null) {
				try {
					log.debug("Setting primary key using " + sql.getPrimaryKeySetMethod().getName() + " with argument: " + id);
					sql.getPrimaryKeySetMethod().invoke(object, id);
				} catch (InvocationTargetException e) {
					log.warn("Unable to set id on object: " + object + " to '" + id + "' using method: " + sql.getPrimaryKeySetMethod().getName());
					return id;
				} catch (RuntimeException e) {
					String errorMsg = "Unable to set id on object: " + object + " to '" + id + "' using method: " + sql.getPrimaryKeySetMethod().getName();
					log.warn(errorMsg, e);
					throw new MappingException(errorMsg, e);
				}
			}
			return id;
		} catch (IllegalAccessException e) {
			throw new MappingException("IllegalAccess - unable to insert. Check that all required methods are public", e);
		} catch (RuntimeException e) {
			log.error("Unexpected Runtime exception in SimpleResultSetMapper - please report", e);
			throw new MappingException("Unexpected Runtime exception in SimpleResultSetMapper - please report", e);
		} finally {
			if (stmt != null) {
				stmt.close();
			}
		}
	}
	
	public static class SqlInsert {
		private String sql;
		private Map<String, Object> parameterValues = new LinkedHashMap<String, Object>();

		private Method primaryKeySetMethod = null;

		public SqlInsert() {
			super();
		}

		public void setPrimaryKeySetMethod(Method columnSetMethod) {
			this.primaryKeySetMethod = columnSetMethod;
		}

		public Method getPrimaryKeySetMethod() {
			return this.primaryKeySetMethod;
		}

		public String getSql() {
			return sql;
		}

		public void setSql(String sql) {
			this.sql = sql;
		}

		public Map<String, Object> getParameterValues() {
			return parameterValues;
		}

		public void addParameterValue(String name, Object value) {
			parameterValues.put(name, value);
		}
	}
}